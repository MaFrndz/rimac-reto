{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AppointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-appointment"
      }
    },
    "AppointmentUnderscorepeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-appointment_pe"
      }
    },
    "AppointmentUnderscoreclLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-appointment_cl"
      }
    },
    "UpdateAppointmentStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-updateAppointmentStatus"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "appointment-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appointment-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appointment-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem"
                  ],
                  "Resource": {
                    "Fn::GetAtt": [
                      "AppointmentsTable",
                      "Arn"
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sns:Publish"
                  ],
                  "Resource": {
                    "Ref": "AppointmentsSNSTopic"
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "events:PutEvents"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "AppointmentQueuePE",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AppointmentQueueCL",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AppointmentConfirmationQueue",
                        "Arn"
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "AppointmentQueuePE",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AppointmentQueueCL",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "AppointmentConfirmationQueue",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "appointment-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AppointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751266125893-2025-06-30T06:48:45.893Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/appointment.appointmentHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-appointment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "EVENT_BUS_NAME": "default",
            "DYNAMODB_TABLE": {
              "Ref": "AppointmentsTable"
            },
            "RDS_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Password123",
            "RDS_DATABASE_PE": "mysql-pe",
            "RDS_DATABASE_CL": "mysql-cl",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentLogGroup"
      ]
    },
    "AppointmentUnderscorepeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751266125893-2025-06-30T06:48:45.893Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/appointment_pe.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-appointment_pe",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "EVENT_BUS_NAME": "default",
            "DYNAMODB_TABLE": {
              "Ref": "AppointmentsTable"
            },
            "RDS_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Password123",
            "RDS_DATABASE_PE": "mysql-pe",
            "RDS_DATABASE_CL": "mysql-cl",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentUnderscorepeLogGroup"
      ]
    },
    "AppointmentUnderscoreclLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751266125893-2025-06-30T06:48:45.893Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/appointment_cl.handler",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-appointment_cl",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "EVENT_BUS_NAME": "default",
            "DYNAMODB_TABLE": {
              "Ref": "AppointmentsTable"
            },
            "RDS_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Password123",
            "RDS_DATABASE_PE": "mysql-pe",
            "RDS_DATABASE_CL": "mysql-cl",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentUnderscoreclLogGroup"
      ]
    },
    "UpdateAppointmentStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751266125893-2025-06-30T06:48:45.893Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/appointment_confirmation.processCompletionFromSQS",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-updateAppointmentStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "EVENT_BUS_NAME": "default",
            "DYNAMODB_TABLE": {
              "Ref": "AppointmentsTable"
            },
            "RDS_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "RDS_USER": "admin",
            "RDS_PASSWORD": "Password123",
            "RDS_DATABASE_PE": "mysql-pe",
            "RDS_DATABASE_CL": "mysql-cl",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateAppointmentStatusLogGroup"
      ]
    },
    "AppointmentLambdaVersionN0awep8WKCYsoFidwJWoTwbtSFu9UeHEBIpbE9D56Q": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentLambdaFunction"
        },
        "CodeSha256": "G/0C0AN/4BOvs+yiq677tb/N/7EovM+V7Jgfo9A1D8I="
      }
    },
    "AppointmentUnderscorepeLambdaVersionnK3WldhxvsW1CNIPe7jFya91YYmJQ5ITveQK8ezwTs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentUnderscorepeLambdaFunction"
        },
        "CodeSha256": "G/0C0AN/4BOvs+yiq677tb/N/7EovM+V7Jgfo9A1D8I="
      }
    },
    "AppointmentUnderscoreclLambdaVersionccYv1zWs3RurW8cblHbbBm3dBUfWRLSjmLmJdpeOQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentUnderscoreclLambdaFunction"
        },
        "CodeSha256": "G/0C0AN/4BOvs+yiq677tb/N/7EovM+V7Jgfo9A1D8I="
      }
    },
    "UpdateAppointmentStatusLambdaVersionHmBDXqXy0X03mEO2bAs9XkNVfKIaye0gjxK0iqFTg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateAppointmentStatusLambdaFunction"
        },
        "CodeSha256": "G/0C0AN/4BOvs+yiq677tb/N/7EovM+V7Jgfo9A1D8I="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-appointment-backend",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceAppointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAppointmentsOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodAppointmentsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AppointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAppointmentsGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AppointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1751266114178": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodAppointmentsOptions",
        "ApiGatewayMethodAppointmentsPost",
        "ApiGatewayMethodAppointmentsGet"
      ]
    },
    "AppointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AppointmentUnderscorepeEventSourceMappingSQSAppointmentQueuePE": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "AppointmentQueuePE",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentUnderscorepeLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentUnderscoreclEventSourceMappingSQSAppointmentQueueCL": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "AppointmentQueueCL",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentUnderscoreclLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "UpdateAppointmentStatusEventSourceMappingSQSAppointmentConfirmationQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 1,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "AppointmentConfirmationQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateAppointmentStatusLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "appointments",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "AppointmentsSNSTopic": {
      "Type": "AWS::SNS::Topic",
      "Properties": {
        "TopicName": "AppointmentsSNSTopic"
      }
    },
    "AppointmentQueuePE": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "AppointmentQueuePE"
      }
    },
    "AppointmentQueueCL": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "AppointmentQueueCL"
      }
    },
    "AppointmentConfirmationQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "AppointmentConfirmationQueue"
      }
    },
    "SnsToSqsSubscriptionPE": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "AppointmentsSNSTopic"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "AppointmentQueuePE",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "PE"
          ]
        }
      }
    },
    "SnsToSqsSubscriptionCL": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": {
          "Ref": "AppointmentsSNSTopic"
        },
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "AppointmentQueueCL",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "CL"
          ]
        }
      }
    },
    "SqsQueuePolicyPE": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentQueuePE"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "AppointmentQueuePE",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "AppointmentsSNSTopic"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "SqsQueuePolicyCL": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentQueueCL"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "sns.amazonaws.com"
              },
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "AppointmentQueueCL",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Ref": "AppointmentsSNSTopic"
                  }
                }
              }
            }
          ]
        }
      }
    },
    "EventBridgeCompletionRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": [
            "appointment"
          ],
          "detail-type": [
            "AppointmentCompleted"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AppointmentConfirmationQueue",
                "Arn"
              ]
            },
            "Id": "AppointmentConfirmationTarget"
          }
        ]
      }
    },
    "EventBridgeSqsPolicy": {
      "Type": "AWS::SQS::QueuePolicy",
      "Properties": {
        "Queues": [
          {
            "Ref": "AppointmentConfirmationQueue"
          }
        ],
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "events.amazonaws.com"
              },
              "Action": "SQS:SendMessage",
              "Resource": {
                "Fn::GetAtt": [
                  "AppointmentConfirmationQueue",
                  "Arn"
                ]
              },
              "Condition": {
                "ArnEquals": {
                  "aws:SourceArn": {
                    "Fn::GetAtt": [
                      "EventBridgeCompletionRule",
                      "Arn"
                    ]
                  }
                }
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "AppointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentLambdaVersionN0awep8WKCYsoFidwJWoTwbtSFu9UeHEBIpbE9D56Q"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-AppointmentLambdaFunctionQualifiedArn"
      }
    },
    "AppointmentUnderscorepeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentUnderscorepeLambdaVersionnK3WldhxvsW1CNIPe7jFya91YYmJQ5ITveQK8ezwTs"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
      }
    },
    "AppointmentUnderscoreclLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentUnderscoreclLambdaVersionccYv1zWs3RurW8cblHbbBm3dBUfWRLSjmLmJdpeOQ"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
      }
    },
    "UpdateAppointmentStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateAppointmentStatusLambdaVersionHmBDXqXy0X03mEO2bAs9XkNVfKIaye0gjxK0iqFTg"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-UpdateAppointmentStatusLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-ServiceEndpoint"
      }
    }
  }
}