{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "AppointmentUnderscorepeLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-appointment_pe"
      }
    },
    "AppointmentUnderscoreclLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-appointment_cl"
      }
    },
    "UpdateAppointmentStatusLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-updateAppointmentStatus"
      }
    },
    "SqsPEHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-sqsPEHandler"
      }
    },
    "SqsCLHandlerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-sqsCLHandler"
      }
    },
    "HelloLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-hello"
      }
    },
    "AppointmentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-appointment"
      }
    },
    "SwaggerLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/appointment-backend-dev-swagger"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "appointment-backend",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appointment-backend-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/appointment-backend-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sqs:ReceiveMessage",
                    "sqs:DeleteMessage",
                    "sqs:GetQueueAttributes"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "SQSPE",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SQSCL",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "ConformidadQueue",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SQSPE",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "SQSCL",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "appointment-backend",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "AppointmentUnderscorepeLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/appointmentCountry.appointment_pe",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-appointment_pe",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe",
            "MYSQL_DB": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentUnderscorepeLogGroup"
      ]
    },
    "AppointmentUnderscoreclLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/appointmentCountry.appointment_cl",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-appointment_cl",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe",
            "MYSQL_DB": "mysql-cl"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentUnderscoreclLogGroup"
      ]
    },
    "UpdateAppointmentStatusLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/updateAppointmentStatus.updateAppointmentStatus",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-updateAppointmentStatus",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "UpdateAppointmentStatusLogGroup"
      ]
    },
    "SqsPEHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/sqsHandlers.sqsPEHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-sqsPEHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SqsPEHandlerLogGroup"
      ]
    },
    "SqsCLHandlerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/sqsHandlers.sqsCLHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-sqsCLHandler",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SqsCLHandlerLogGroup"
      ]
    },
    "HelloLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "handler.hello",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-hello",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "HelloLogGroup"
      ]
    },
    "AppointmentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/appointment.appointmentHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-appointment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "AppointmentLogGroup"
      ]
    },
    "SwaggerLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/appointment-backend/dev/1751253881473-2025-06-30T03:24:41.473Z/appointment-backend.zip"
        },
        "Handler": "dist/handlers/swagger.swaggerHandler",
        "Runtime": "nodejs18.x",
        "FunctionName": "appointment-backend-dev-swagger",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "SNS_TOPIC_ARN": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
            "MYSQL_HOST": "mysql-stancia.ckdqc08a6quw.us-east-1.rds.amazonaws.com",
            "MYSQL_USER": "admin",
            "MYSQL_PASSWORD": "Password123",
            "MYSQL_CL": "mysql-cl",
            "MYSQL_PE": "mysql-pe"
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SwaggerLogGroup"
      ]
    },
    "AppointmentUnderscorepeLambdaVersionMaW5drdELximFuFlRyDqxfcK8jcKlzSEiotlSIazMM": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentUnderscorepeLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "AppointmentUnderscoreclLambdaVersionq3dBpZ3N5cQCqThZav9XmHD5TlQDAENh8b5mVbZrvrY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentUnderscoreclLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "UpdateAppointmentStatusLambdaVersionIHAAdfCLhUPueiOFCBzhOPsNJqyp9432DLpPRyrU": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "UpdateAppointmentStatusLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "SqsPEHandlerLambdaVersionloOzGwt10nVTmJQpPuEH4YwTzjMrtiZMFuyR2y6aqo": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SqsPEHandlerLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "SqsCLHandlerLambdaVersionIoG6cUNXJSyqkE796TPjhTJ4BZcn8756Z5o0t0Sk": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SqsCLHandlerLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "HelloLambdaVersionvODPWmPOfm5Bd6yJDDY4xl3GushaG5nJzK9qrJETeI": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "HelloLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "AppointmentLambdaVersionMFj5QppIj21ZnA3yeAyxmNHB0nFJ2OJBZKJDJLPm8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "AppointmentLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "SwaggerLambdaVersionAbg7U7fT2430rQbAlxb9b2YYSBWQC8KyQ7BVsDMftA": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SwaggerLambdaFunction"
        },
        "CodeSha256": "to9QRI//6odqLbsJz1F+Tq+aTbV/FZoZaMP6hvfPYzo="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-appointment-backend",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceHello": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "hello",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceAppointments": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "appointments",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceSwagger": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "swagger",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodHelloGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceHello"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "HelloLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "HelloLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodAppointmentsPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceAppointments"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "AppointmentLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "AppointmentLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodSwaggerGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceSwagger"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "SwaggerLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "SwaggerLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1751253859986": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodHelloGet",
        "ApiGatewayMethodAppointmentsPost",
        "ApiGatewayMethodSwaggerGet"
      ]
    },
    "HelloLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "HelloLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AppointmentLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "SwaggerLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "SwaggerLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "AppointmentUnderscorepeEventSourceMappingSQSSQSPE": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSPE",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentUnderscorepeLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentUnderscoreclEventSourceMappingSQSSQSCL": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSCL",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "AppointmentUnderscoreclLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "UpdateAppointmentStatusEventSourceMappingSQSConformidadQueue": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "ConformidadQueue",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "UpdateAppointmentStatusLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "SqsPEHandlerEventSourceMappingSQSSQSPE": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSPE",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "SqsPEHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "SqsCLHandlerEventSourceMappingSQSSQSCL": {
      "Type": "AWS::Lambda::EventSourceMapping",
      "DependsOn": [
        "IamRoleLambdaExecution"
      ],
      "Properties": {
        "BatchSize": 10,
        "EventSourceArn": {
          "Fn::GetAtt": [
            "SQSCL",
            "Arn"
          ]
        },
        "FunctionName": {
          "Fn::GetAtt": [
            "SqsCLHandlerLambdaFunction",
            "Arn"
          ]
        },
        "Enabled": true
      }
    },
    "AppointmentsTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "appointments",
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "ConformidadQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "SQS_Conformidad"
      }
    },
    "EventBridgeToSQSRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": [
            "appointment"
          ],
          "detail-type": [
            "AppointmentCompleted"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "ConformidadQueue",
                "Arn"
              ]
            },
            "Id": "TargetSQS"
          }
        ]
      }
    },
    "SQSPE": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "SQS_PE"
      }
    },
    "SQSCL": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "SQS_CL"
      }
    },
    "SQSPESubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "SQSPE",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "PE"
          ]
        }
      }
    },
    "SQSCLSubscription": {
      "Type": "AWS::SNS::Subscription",
      "Properties": {
        "TopicArn": "arn:aws:sns:us-east-1:393157401981:AppoinmentsSNS",
        "Protocol": "sqs",
        "Endpoint": {
          "Fn::GetAtt": [
            "SQSCL",
            "Arn"
          ]
        },
        "FilterPolicy": {
          "countryISO": [
            "CL"
          ]
        }
      }
    },
    "AppointmentConfirmationQueue": {
      "Type": "AWS::SQS::Queue",
      "Properties": {
        "QueueName": "AppointmentConfirmationQueue"
      }
    },
    "EventBridgeToAppointmentConfirmationQueueRule": {
      "Type": "AWS::Events::Rule",
      "Properties": {
        "EventPattern": {
          "source": [
            "appointment"
          ],
          "detail-type": [
            "AppointmentCompleted"
          ]
        },
        "Targets": [
          {
            "Arn": {
              "Fn::GetAtt": [
                "AppointmentConfirmationQueue",
                "Arn"
              ]
            },
            "Id": "TargetAppointmentConfirmationQueue"
          }
        ]
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-ServerlessDeploymentBucketName"
      }
    },
    "AppointmentUnderscorepeLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentUnderscorepeLambdaVersionMaW5drdELximFuFlRyDqxfcK8jcKlzSEiotlSIazMM"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-AppointmentUnderscorepeLambdaFunctionQualifiedArn"
      }
    },
    "AppointmentUnderscoreclLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentUnderscoreclLambdaVersionq3dBpZ3N5cQCqThZav9XmHD5TlQDAENh8b5mVbZrvrY"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-AppointmentUnderscoreclLambdaFunctionQualifiedArn"
      }
    },
    "UpdateAppointmentStatusLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "UpdateAppointmentStatusLambdaVersionIHAAdfCLhUPueiOFCBzhOPsNJqyp9432DLpPRyrU"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-UpdateAppointmentStatusLambdaFunctionQualifiedArn"
      }
    },
    "SqsPEHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SqsPEHandlerLambdaVersionloOzGwt10nVTmJQpPuEH4YwTzjMrtiZMFuyR2y6aqo"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-SqsPEHandlerLambdaFunctionQualifiedArn"
      }
    },
    "SqsCLHandlerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SqsCLHandlerLambdaVersionIoG6cUNXJSyqkE796TPjhTJ4BZcn8756Z5o0t0Sk"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-SqsCLHandlerLambdaFunctionQualifiedArn"
      }
    },
    "HelloLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "HelloLambdaVersionvODPWmPOfm5Bd6yJDDY4xl3GushaG5nJzK9qrJETeI"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-HelloLambdaFunctionQualifiedArn"
      }
    },
    "AppointmentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "AppointmentLambdaVersionMFj5QppIj21ZnA3yeAyxmNHB0nFJ2OJBZKJDJLPm8"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-AppointmentLambdaFunctionQualifiedArn"
      }
    },
    "SwaggerLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SwaggerLambdaVersionAbg7U7fT2430rQbAlxb9b2YYSBWQC8KyQ7BVsDMftA"
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-SwaggerLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-appointment-backend-dev-ServiceEndpoint"
      }
    }
  }
}